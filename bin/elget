#!/usr/bin/env node
require('colors')
var fs = require('fs')
  path = require('path')
  os = require('os')
  https = require('https')
  tar = require('tar-fs')
  zlib = require('zlib')
  util = require('util')
  program = require('commander')

function unpack(dir, s) {
  console.log(`[${dir.magenta}] extracting...`)
    var z = zlib.createGunzip();
    var e = tar.extract(dir, {
      map: function (header) {
        console.log(header.name.gray)
        return header
      }
    })
    s.pipe(z).pipe(e)
}

function download(dir, url) {
  console.log('  ' + url.gray)
  https.get(url, function (res) {
    if(res.statusCode > 300 && res.statusCode <= 308) {
      download(dir, res.headers.location);
        } else if(res.statusCode === 200) {
            unpack(dir, res)
        } else {
            console.log(util.inspect({ code: res.statusCode, headers: res.headers }))
            return process.exit(1)
        }
  })
}

function bingetDir(dir, info, cb) {
  var packagePath = path.join(dir, 'package.json')
  if (dir !== process.cwd()) { // skip self
    fs.readFile(packagePath, {encoding:'utf8'}, function (err, result) {
      if(err) return
      var package = JSON.parse(result)
      if(package && package.binaries) {
        console.log(`[${dir.magenta}] downloading binaries...`)
        package.binaries.forEach(function (bin) {
          ['x86', 'x64'].forEach(function (arch) {
            ['debug', 'release'].forEach(function (configuration) {
              var url = bin
                .replace(/{name}/g, package.name)
                .replace(/{version}/g, package.version)
                .replace(/{platform}/g, info.platform)
                .replace(/{arch}/g, arch)
                .replace(/{configuration}/g, configuration)
                .replace(/{channel}/g, info.channel)
              download(dir, url)
            })
          })
        })
      }
    })
  }
  fs.readdir(dir, function (err, result) {
    if (err) return
    result.forEach(function (f) {
      var p = path.join(dir, f)
      fs.lstat(p, function (err, result) {
        if(err || result.isSymbolicLink()) return
        if(result.isDirectory())
          bingetDir(p, info, cb)
      })
    })
  })
}

program
  .option('-c, --channel [channel]', 'Specify the channel.', 'master')
  .parse(process.argv)

var platform = os.platform()
var arch = os.arch()
console.log('elget: ' + program.channel.gray)
bingetDir(process.cwd(), {
  channel: program.channel,
  platform: platform
}, function (err) {
  console.log('[' + 'error'.red + ']: ' + err)
})