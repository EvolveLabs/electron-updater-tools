#!/usr/bin/env node
require('colors')
var fs = require('fs')
  path = require('path')
  os = require('os')
  https = require('https')
  tar = require('tar-fs')
  zlib = require('zlib')
  util = require('util')
  program = require('commander'),
  async = require('async')

function unpack(dir, s, callback) {
  var z = zlib.createGunzip();
  var e = tar.extract(dir, {
    map: function (header) {
      console.log('  └─ ' + path.join(dir, header.name).gray)
      return header
    }
  })
  s.pipe(z).pipe(e).on('finish', function () {
    callback(null, true)
  })
}

function download(dir, url, callback) {
  console.log(`[${path.basename(dir).green}] downloading...`)
  console.log('  ' + url.gray)
  https.get(url, function (res) {
    if(res.statusCode > 300 && res.statusCode <= 308) {
      download(dir, res.headers.location, callback);
    } else if(res.statusCode === 200) {
      unpack(dir, res, callback)
    } else if(res.statusCode === 404) {
      callback(null, false)
    } else {
      callback(new Error({ statusCode: res.statusCode, headers: res.headers }))
    }
  })
}

function bingetDir(dir, info, callback) {
  var packagePath = path.join(dir, 'package.json')
  fs.readFile(packagePath, {encoding:'utf8'}, function (err, result) {
    if(err) return callback(null, false)
    var package = JSON.parse(result)
    if(package && package.binaries) {
      async.map(
        package.binaries,
        function (bin, callback) {
          var url = bin
            .replace(/{name}/g, package.name)
            .replace(/{version}/g, package.version)
            .replace(/{platform}/g, info.platform)
            .replace(/{arch}/g, info.arch)
            .replace(/{configuration}/g, info.configuration)
            .replace(/{channel}/g, 'master')
          download(dir, url, callback)
        },
        function (err, results) {
          if(err) return callback(err)
          callback(null, results.indexOf(false) == -1)
        })
    } else {
      callback(null, false)
    }
  })
}

var platform = os.platform()
var arch = os.arch()
var dir = process.cwd()
program
  .option('-C, --configuration [release]', 'Specify the configuration.', 'release')
  .option(`-a, --arch [$arch]`, 'Specify the architecture.', arch)
  .option(`-p, --platform [$platform]`, 'Specify the platform.', platform)
  .parse(process.argv)

var options = {
  configuration: program.configuration,
  arch: program.arch,
  platform: program.platform
}

bingetDir(dir, options , function (err, result) {
  if(err) {
    console.log('[' + 'error'.red + ']: ' + err)
    process.exit(-1)
  } else {
    if (result) {
      console.log('')
      process.exit(0)
    } else {
      console.log(`[${path.basename(dir).yellow}] binaries not found.`)
      process.exit(1)
    }
  }
})