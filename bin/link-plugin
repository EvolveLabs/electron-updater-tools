#!/usr/bin/env node
require('shelljs/global');
require('colors');
var fs = require('fs'),
    proc = require('child_process'),
    path = require('path'),
    util = require('util'),
    AppDirectory = require('appdirectory'),
    program = require('commander')

var valid = false
program
    .version('0.0.1')
    .usage('[options] <publisher> <appname>')
    .option('-u, --unlink', 'Unlink a plugin from <publisher>/<appname>')

program
    .arguments('<publisher> <appname>')
    .action(function (publisher, appname) {
        valid = true
        linkPlugin(publisher, appname)
    })

program.parse(process.argv);

if (!valid) {
    console.error()
    console.error('  [' + 'error'.red + '] appname is required.');
    program.outputHelp()
    process.exit(1);
}

function linkPlugin(publisher, appName, callback) {
    fs.readFile('package.json', {encoding: 'utf8'}, function (err, data) {
        if(err) echo('[' + 'error'.red + '] package.json not found in current working directory') && process.exit(1)
        var package = JSON.parse(data)
        var pluginName = package.name
        var dirs = new AppDirectory({
            appName: appName,
            appAuthor: publisher
        })
        var appData = dirs.userData()
        var pluginsDir = path.join(appData, 'plugins')
        var pluginDir = process.cwd()
        var linkDir = path.join(pluginsDir, pluginName)
        var linkPath = path.join(linkDir, 'link')
        mkdir('-p', linkDir)

        if (program.unlink) {
            fs.lstat(linkPath, function (err, stat) {
            	if(stat  && stat.isSymbolicLink()) {
                	fs.unlink(linkPath, function (err) {
                		if (err) echo('[' + `${pluginName}`.red + `] ${err}`) && process.exit(1)
                		echo('[' + pluginName.magenta + '] unlinked')
                	})
                } else {
                	echo('[' + pluginName.yellow + '] not found')
                    process.exit(1)
                }
            })
        }

        if (!program.unlink) {
            if (!fs.existsSync(linkPath)) {
                fs.symlinkSync(pluginDir, linkPath, 'junction')
                echo('[' + pluginName.green + '] linked')
            } else {
                echo('[' + pluginName.yellow + '] already linked')
            }
        }
    })
}